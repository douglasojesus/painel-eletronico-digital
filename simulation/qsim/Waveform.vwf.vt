// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2023 16:52:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Letreiro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Letreiro_vlg_sample_tst(
	CLK,
	ch0,
	ch1,
	sampler_tx
);
input  CLK;
input  ch0;
input  ch1;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ch0 or ch1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Letreiro_vlg_check_tst (
	saida1,
	saida2,
	saida3,
	saida4,
	sampler_rx
);
input  saida1;
input  saida2;
input  saida3;
input  saida4;
input sampler_rx;

reg  saida1_expected;
reg  saida2_expected;
reg  saida3_expected;
reg  saida4_expected;

reg  saida1_prev;
reg  saida2_prev;
reg  saida3_prev;
reg  saida4_prev;

reg  saida1_expected_prev;
reg  saida2_expected_prev;
reg  saida3_expected_prev;
reg  saida4_expected_prev;

reg  last_saida1_exp;
reg  last_saida2_exp;
reg  last_saida3_exp;
reg  last_saida4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	saida1_prev = saida1;
	saida2_prev = saida2;
	saida3_prev = saida3;
	saida4_prev = saida4;
end

// update expected /o prevs

always @(trigger)
begin
	saida1_expected_prev = saida1_expected;
	saida2_expected_prev = saida2_expected;
	saida3_expected_prev = saida3_expected;
	saida4_expected_prev = saida4_expected;
end



// expected saida1
initial
begin
	saida1_expected = 1'bX;
end 

// expected saida2
initial
begin
	saida2_expected = 1'bX;
end 

// expected saida3
initial
begin
	saida3_expected = 1'bX;
end 

// expected saida4
initial
begin
	saida4_expected = 1'bX;
end 
// generate trigger
always @(saida1_expected or saida1 or saida2_expected or saida2 or saida3_expected or saida3 or saida4_expected or saida4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected saida1 = %b | expected saida2 = %b | expected saida3 = %b | expected saida4 = %b | ",saida1_expected_prev,saida2_expected_prev,saida3_expected_prev,saida4_expected_prev);
	$display("| real saida1 = %b | real saida2 = %b | real saida3 = %b | real saida4 = %b | ",saida1_prev,saida2_prev,saida3_prev,saida4_prev);
`endif
	if (
		( saida1_expected_prev !== 1'bx ) && ( saida1_prev !== saida1_expected_prev )
		&& ((saida1_expected_prev !== last_saida1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida1_exp = saida1_expected_prev;
	end
	if (
		( saida2_expected_prev !== 1'bx ) && ( saida2_prev !== saida2_expected_prev )
		&& ((saida2_expected_prev !== last_saida2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida2_exp = saida2_expected_prev;
	end
	if (
		( saida3_expected_prev !== 1'bx ) && ( saida3_prev !== saida3_expected_prev )
		&& ((saida3_expected_prev !== last_saida3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida3_exp = saida3_expected_prev;
	end
	if (
		( saida4_expected_prev !== 1'bx ) && ( saida4_prev !== saida4_expected_prev )
		&& ((saida4_expected_prev !== last_saida4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida4_exp = saida4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#80000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Letreiro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg ch0;
reg ch1;
// wires                                               
wire saida1;
wire saida2;
wire saida3;
wire saida4;

wire sampler;                             

// assign statements (if any)                          
Letreiro i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.ch0(ch0),
	.ch1(ch1),
	.saida1(saida1),
	.saida2(saida2),
	.saida3(saida3),
	.saida4(saida4)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// ch0
always
begin
	ch0 = 1'b0;
	ch0 = #10000 1'b1;
	#10000;
end 

// ch1
always
begin
	ch1 = 1'b0;
	ch1 = #20000 1'b1;
	#20000;
end 

Letreiro_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ch0(ch0),
	.ch1(ch1),
	.sampler_tx(sampler)
);

Letreiro_vlg_check_tst tb_out(
	.saida1(saida1),
	.saida2(saida2),
	.saida3(saida3),
	.saida4(saida4),
	.sampler_rx(sampler)
);
endmodule

