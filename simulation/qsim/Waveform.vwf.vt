// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2023 17:00:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Letreiro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Letreiro_vlg_sample_tst(
	CLK,
	ch0,
	ch1,
	sampler_tx
);
input  CLK;
input  ch0;
input  ch1;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ch0 or ch1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Letreiro_vlg_check_tst (
	C1,
	C2,
	C3,
	C4,
	C5,
	C6,
	C7,
	L1,
	L2,
	L3,
	L4,
	L5,
	sampler_rx
);
input  C1;
input  C2;
input  C3;
input  C4;
input  C5;
input  C6;
input  C7;
input  L1;
input  L2;
input  L3;
input  L4;
input  L5;
input sampler_rx;

reg  C1_expected;
reg  C2_expected;
reg  C3_expected;
reg  C4_expected;
reg  C5_expected;
reg  C6_expected;
reg  C7_expected;
reg  L1_expected;
reg  L2_expected;
reg  L3_expected;
reg  L4_expected;
reg  L5_expected;

reg  C1_prev;
reg  C2_prev;
reg  C3_prev;
reg  C4_prev;
reg  C5_prev;
reg  C6_prev;
reg  C7_prev;
reg  L1_prev;
reg  L2_prev;
reg  L3_prev;
reg  L4_prev;
reg  L5_prev;

reg  C1_expected_prev;
reg  C2_expected_prev;
reg  C3_expected_prev;
reg  C4_expected_prev;
reg  C5_expected_prev;
reg  C6_expected_prev;
reg  C7_expected_prev;
reg  L1_expected_prev;
reg  L2_expected_prev;
reg  L3_expected_prev;
reg  L4_expected_prev;
reg  L5_expected_prev;

reg  last_C1_exp;
reg  last_C2_exp;
reg  last_C3_exp;
reg  last_C4_exp;
reg  last_C5_exp;
reg  last_C6_exp;
reg  last_C7_exp;
reg  last_L1_exp;
reg  last_L2_exp;
reg  last_L3_exp;
reg  last_L4_exp;
reg  last_L5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	C1_prev = C1;
	C2_prev = C2;
	C3_prev = C3;
	C4_prev = C4;
	C5_prev = C5;
	C6_prev = C6;
	C7_prev = C7;
	L1_prev = L1;
	L2_prev = L2;
	L3_prev = L3;
	L4_prev = L4;
	L5_prev = L5;
end

// update expected /o prevs

always @(trigger)
begin
	C1_expected_prev = C1_expected;
	C2_expected_prev = C2_expected;
	C3_expected_prev = C3_expected;
	C4_expected_prev = C4_expected;
	C5_expected_prev = C5_expected;
	C6_expected_prev = C6_expected;
	C7_expected_prev = C7_expected;
	L1_expected_prev = L1_expected;
	L2_expected_prev = L2_expected;
	L3_expected_prev = L3_expected;
	L4_expected_prev = L4_expected;
	L5_expected_prev = L5_expected;
end



// expected C1
initial
begin
	C1_expected = 1'bX;
end 

// expected C2
initial
begin
	C2_expected = 1'bX;
end 

// expected C3
initial
begin
	C3_expected = 1'bX;
end 

// expected C4
initial
begin
	C4_expected = 1'bX;
end 

// expected C5
initial
begin
	C5_expected = 1'bX;
end 

// expected C6
initial
begin
	C6_expected = 1'bX;
end 

// expected C7
initial
begin
	C7_expected = 1'bX;
end 

// expected L1
initial
begin
	L1_expected = 1'bX;
end 

// expected L2
initial
begin
	L2_expected = 1'bX;
end 

// expected L3
initial
begin
	L3_expected = 1'bX;
end 

// expected L4
initial
begin
	L4_expected = 1'bX;
end 

// expected L5
initial
begin
	L5_expected = 1'bX;
end 
// generate trigger
always @(C1_expected or C1 or C2_expected or C2 or C3_expected or C3 or C4_expected or C4 or C5_expected or C5 or C6_expected or C6 or C7_expected or C7 or L1_expected or L1 or L2_expected or L2 or L3_expected or L3 or L4_expected or L4 or L5_expected or L5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C1 = %b | expected C2 = %b | expected C3 = %b | expected C4 = %b | expected C5 = %b | expected C6 = %b | expected C7 = %b | expected L1 = %b | expected L2 = %b | expected L3 = %b | expected L4 = %b | expected L5 = %b | ",C1_expected_prev,C2_expected_prev,C3_expected_prev,C4_expected_prev,C5_expected_prev,C6_expected_prev,C7_expected_prev,L1_expected_prev,L2_expected_prev,L3_expected_prev,L4_expected_prev,L5_expected_prev);
	$display("| real C1 = %b | real C2 = %b | real C3 = %b | real C4 = %b | real C5 = %b | real C6 = %b | real C7 = %b | real L1 = %b | real L2 = %b | real L3 = %b | real L4 = %b | real L5 = %b | ",C1_prev,C2_prev,C3_prev,C4_prev,C5_prev,C6_prev,C7_prev,L1_prev,L2_prev,L3_prev,L4_prev,L5_prev);
`endif
	if (
		( C1_expected_prev !== 1'bx ) && ( C1_prev !== C1_expected_prev )
		&& ((C1_expected_prev !== last_C1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1_expected_prev);
		$display ("     Real value = %b", C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C1_exp = C1_expected_prev;
	end
	if (
		( C2_expected_prev !== 1'bx ) && ( C2_prev !== C2_expected_prev )
		&& ((C2_expected_prev !== last_C2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C2_exp = C2_expected_prev;
	end
	if (
		( C3_expected_prev !== 1'bx ) && ( C3_prev !== C3_expected_prev )
		&& ((C3_expected_prev !== last_C3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3_expected_prev);
		$display ("     Real value = %b", C3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C3_exp = C3_expected_prev;
	end
	if (
		( C4_expected_prev !== 1'bx ) && ( C4_prev !== C4_expected_prev )
		&& ((C4_expected_prev !== last_C4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C4_exp = C4_expected_prev;
	end
	if (
		( C5_expected_prev !== 1'bx ) && ( C5_prev !== C5_expected_prev )
		&& ((C5_expected_prev !== last_C5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5_expected_prev);
		$display ("     Real value = %b", C5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C5_exp = C5_expected_prev;
	end
	if (
		( C6_expected_prev !== 1'bx ) && ( C6_prev !== C6_expected_prev )
		&& ((C6_expected_prev !== last_C6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6_expected_prev);
		$display ("     Real value = %b", C6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C6_exp = C6_expected_prev;
	end
	if (
		( C7_expected_prev !== 1'bx ) && ( C7_prev !== C7_expected_prev )
		&& ((C7_expected_prev !== last_C7_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7_expected_prev);
		$display ("     Real value = %b", C7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C7_exp = C7_expected_prev;
	end
	if (
		( L1_expected_prev !== 1'bx ) && ( L1_prev !== L1_expected_prev )
		&& ((L1_expected_prev !== last_L1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L1_expected_prev);
		$display ("     Real value = %b", L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_L1_exp = L1_expected_prev;
	end
	if (
		( L2_expected_prev !== 1'bx ) && ( L2_prev !== L2_expected_prev )
		&& ((L2_expected_prev !== last_L2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L2_expected_prev);
		$display ("     Real value = %b", L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_L2_exp = L2_expected_prev;
	end
	if (
		( L3_expected_prev !== 1'bx ) && ( L3_prev !== L3_expected_prev )
		&& ((L3_expected_prev !== last_L3_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L3_expected_prev);
		$display ("     Real value = %b", L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_L3_exp = L3_expected_prev;
	end
	if (
		( L4_expected_prev !== 1'bx ) && ( L4_prev !== L4_expected_prev )
		&& ((L4_expected_prev !== last_L4_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L4_expected_prev);
		$display ("     Real value = %b", L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_L4_exp = L4_expected_prev;
	end
	if (
		( L5_expected_prev !== 1'bx ) && ( L5_prev !== L5_expected_prev )
		&& ((L5_expected_prev !== last_L5_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L5_expected_prev);
		$display ("     Real value = %b", L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_L5_exp = L5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Letreiro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg ch0;
reg ch1;
// wires                                               
wire C1;
wire C2;
wire C3;
wire C4;
wire C5;
wire C6;
wire C7;
wire L1;
wire L2;
wire L3;
wire L4;
wire L5;

wire sampler;                             

// assign statements (if any)                          
Letreiro i1 (
// port map - connection between master ports and signals/registers   
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.CLK(CLK),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.ch0(ch0),
	.ch1(ch1)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// ch0
initial
begin
	ch0 = 1'b0;
	ch0 = #10000 1'b1;
end 

// ch1
initial
begin
	ch1 = 1'b0;
end 

Letreiro_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ch0(ch0),
	.ch1(ch1),
	.sampler_tx(sampler)
);

Letreiro_vlg_check_tst tb_out(
	.C1(C1),
	.C2(C2),
	.C3(C3),
	.C4(C4),
	.C5(C5),
	.C6(C6),
	.C7(C7),
	.L1(L1),
	.L2(L2),
	.L3(L3),
	.L4(L4),
	.L5(L5),
	.sampler_rx(sampler)
);
endmodule

