// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/14/2023 22:28:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Letreiro
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Letreiro_vlg_sample_tst(
	CLK,
	ch0,
	ch1,
	sampler_tx
);
input  CLK;
input  ch0;
input  ch1;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ch0 or ch1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Letreiro_vlg_check_tst (
	C1L1,
	C1L2,
	C1L3,
	C1L4,
	C1L5,
	C2L1,
	C2L2,
	C2L3,
	C2L4,
	C2L5,
	C3L1,
	C3L2,
	C3L3,
	C3L4,
	C3L5,
	C4L1,
	C4L2,
	C4L3,
	C4L4,
	C4L5,
	C5L1,
	C5L2,
	C5L3,
	C5L4,
	C5L5,
	C6L1,
	C6L2,
	C6L3,
	C6L4,
	C6L5,
	C7L1,
	C7L2,
	C7L3,
	C7L4,
	C7L5,
	sampler_rx
);
input  C1L1;
input  C1L2;
input  C1L3;
input  C1L4;
input  C1L5;
input  C2L1;
input  C2L2;
input  C2L3;
input  C2L4;
input  C2L5;
input  C3L1;
input  C3L2;
input  C3L3;
input  C3L4;
input  C3L5;
input  C4L1;
input  C4L2;
input  C4L3;
input  C4L4;
input  C4L5;
input  C5L1;
input  C5L2;
input  C5L3;
input  C5L4;
input  C5L5;
input  C6L1;
input  C6L2;
input  C6L3;
input  C6L4;
input  C6L5;
input  C7L1;
input  C7L2;
input  C7L3;
input  C7L4;
input  C7L5;
input sampler_rx;

reg  C1L1_expected;
reg  C1L2_expected;
reg  C1L3_expected;
reg  C1L4_expected;
reg  C1L5_expected;
reg  C2L1_expected;
reg  C2L2_expected;
reg  C2L3_expected;
reg  C2L4_expected;
reg  C2L5_expected;
reg  C3L1_expected;
reg  C3L2_expected;
reg  C3L3_expected;
reg  C3L4_expected;
reg  C3L5_expected;
reg  C4L1_expected;
reg  C4L2_expected;
reg  C4L3_expected;
reg  C4L4_expected;
reg  C4L5_expected;
reg  C5L1_expected;
reg  C5L2_expected;
reg  C5L3_expected;
reg  C5L4_expected;
reg  C5L5_expected;
reg  C6L1_expected;
reg  C6L2_expected;
reg  C6L3_expected;
reg  C6L4_expected;
reg  C6L5_expected;
reg  C7L1_expected;
reg  C7L2_expected;
reg  C7L3_expected;
reg  C7L4_expected;
reg  C7L5_expected;

reg  C1L1_prev;
reg  C1L2_prev;
reg  C1L3_prev;
reg  C1L4_prev;
reg  C1L5_prev;
reg  C2L1_prev;
reg  C2L2_prev;
reg  C2L3_prev;
reg  C2L4_prev;
reg  C2L5_prev;
reg  C3L1_prev;
reg  C3L2_prev;
reg  C3L3_prev;
reg  C3L4_prev;
reg  C3L5_prev;
reg  C4L1_prev;
reg  C4L2_prev;
reg  C4L3_prev;
reg  C4L4_prev;
reg  C4L5_prev;
reg  C5L1_prev;
reg  C5L2_prev;
reg  C5L3_prev;
reg  C5L4_prev;
reg  C5L5_prev;
reg  C6L1_prev;
reg  C6L2_prev;
reg  C6L3_prev;
reg  C6L4_prev;
reg  C6L5_prev;
reg  C7L1_prev;
reg  C7L2_prev;
reg  C7L3_prev;
reg  C7L4_prev;
reg  C7L5_prev;

reg  C1L1_expected_prev;
reg  C1L2_expected_prev;
reg  C1L3_expected_prev;
reg  C1L4_expected_prev;
reg  C1L5_expected_prev;
reg  C2L1_expected_prev;
reg  C2L2_expected_prev;
reg  C2L3_expected_prev;
reg  C2L4_expected_prev;
reg  C2L5_expected_prev;
reg  C3L1_expected_prev;
reg  C3L2_expected_prev;
reg  C3L3_expected_prev;
reg  C3L4_expected_prev;
reg  C3L5_expected_prev;
reg  C4L1_expected_prev;
reg  C4L2_expected_prev;
reg  C4L3_expected_prev;
reg  C4L4_expected_prev;
reg  C4L5_expected_prev;
reg  C5L1_expected_prev;
reg  C5L2_expected_prev;
reg  C5L3_expected_prev;
reg  C5L4_expected_prev;
reg  C5L5_expected_prev;
reg  C6L1_expected_prev;
reg  C6L2_expected_prev;
reg  C6L3_expected_prev;
reg  C6L4_expected_prev;
reg  C6L5_expected_prev;
reg  C7L1_expected_prev;
reg  C7L2_expected_prev;
reg  C7L3_expected_prev;
reg  C7L4_expected_prev;
reg  C7L5_expected_prev;

reg  last_C1L1_exp;
reg  last_C1L2_exp;
reg  last_C1L3_exp;
reg  last_C1L4_exp;
reg  last_C1L5_exp;
reg  last_C2L1_exp;
reg  last_C2L2_exp;
reg  last_C2L3_exp;
reg  last_C2L4_exp;
reg  last_C2L5_exp;
reg  last_C3L1_exp;
reg  last_C3L2_exp;
reg  last_C3L3_exp;
reg  last_C3L4_exp;
reg  last_C3L5_exp;
reg  last_C4L1_exp;
reg  last_C4L2_exp;
reg  last_C4L3_exp;
reg  last_C4L4_exp;
reg  last_C4L5_exp;
reg  last_C5L1_exp;
reg  last_C5L2_exp;
reg  last_C5L3_exp;
reg  last_C5L4_exp;
reg  last_C5L5_exp;
reg  last_C6L1_exp;
reg  last_C6L2_exp;
reg  last_C6L3_exp;
reg  last_C6L4_exp;
reg  last_C6L5_exp;
reg  last_C7L1_exp;
reg  last_C7L2_exp;
reg  last_C7L3_exp;
reg  last_C7L4_exp;
reg  last_C7L5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:35] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 35'b1;
end

// update real /o prevs

always @(trigger)
begin
	C1L1_prev = C1L1;
	C1L2_prev = C1L2;
	C1L3_prev = C1L3;
	C1L4_prev = C1L4;
	C1L5_prev = C1L5;
	C2L1_prev = C2L1;
	C2L2_prev = C2L2;
	C2L3_prev = C2L3;
	C2L4_prev = C2L4;
	C2L5_prev = C2L5;
	C3L1_prev = C3L1;
	C3L2_prev = C3L2;
	C3L3_prev = C3L3;
	C3L4_prev = C3L4;
	C3L5_prev = C3L5;
	C4L1_prev = C4L1;
	C4L2_prev = C4L2;
	C4L3_prev = C4L3;
	C4L4_prev = C4L4;
	C4L5_prev = C4L5;
	C5L1_prev = C5L1;
	C5L2_prev = C5L2;
	C5L3_prev = C5L3;
	C5L4_prev = C5L4;
	C5L5_prev = C5L5;
	C6L1_prev = C6L1;
	C6L2_prev = C6L2;
	C6L3_prev = C6L3;
	C6L4_prev = C6L4;
	C6L5_prev = C6L5;
	C7L1_prev = C7L1;
	C7L2_prev = C7L2;
	C7L3_prev = C7L3;
	C7L4_prev = C7L4;
	C7L5_prev = C7L5;
end

// update expected /o prevs

always @(trigger)
begin
	C1L1_expected_prev = C1L1_expected;
	C1L2_expected_prev = C1L2_expected;
	C1L3_expected_prev = C1L3_expected;
	C1L4_expected_prev = C1L4_expected;
	C1L5_expected_prev = C1L5_expected;
	C2L1_expected_prev = C2L1_expected;
	C2L2_expected_prev = C2L2_expected;
	C2L3_expected_prev = C2L3_expected;
	C2L4_expected_prev = C2L4_expected;
	C2L5_expected_prev = C2L5_expected;
	C3L1_expected_prev = C3L1_expected;
	C3L2_expected_prev = C3L2_expected;
	C3L3_expected_prev = C3L3_expected;
	C3L4_expected_prev = C3L4_expected;
	C3L5_expected_prev = C3L5_expected;
	C4L1_expected_prev = C4L1_expected;
	C4L2_expected_prev = C4L2_expected;
	C4L3_expected_prev = C4L3_expected;
	C4L4_expected_prev = C4L4_expected;
	C4L5_expected_prev = C4L5_expected;
	C5L1_expected_prev = C5L1_expected;
	C5L2_expected_prev = C5L2_expected;
	C5L3_expected_prev = C5L3_expected;
	C5L4_expected_prev = C5L4_expected;
	C5L5_expected_prev = C5L5_expected;
	C6L1_expected_prev = C6L1_expected;
	C6L2_expected_prev = C6L2_expected;
	C6L3_expected_prev = C6L3_expected;
	C6L4_expected_prev = C6L4_expected;
	C6L5_expected_prev = C6L5_expected;
	C7L1_expected_prev = C7L1_expected;
	C7L2_expected_prev = C7L2_expected;
	C7L3_expected_prev = C7L3_expected;
	C7L4_expected_prev = C7L4_expected;
	C7L5_expected_prev = C7L5_expected;
end



// expected C1L1
initial
begin
	C1L1_expected = 1'bX;
	C1L1_expected = #79000 1'b0;
end 

// expected C2L1
initial
begin
	C2L1_expected = 1'bX;
	C2L1_expected = #79000 1'b0;
end 

// expected C3L1
initial
begin
	C3L1_expected = 1'bX;
	C3L1_expected = #79000 1'b0;
end 

// expected C4L1
initial
begin
	C4L1_expected = 1'bX;
	C4L1_expected = #79000 1'b0;
end 

// expected C5L1
initial
begin
	C5L1_expected = 1'bX;
	C5L1_expected = #79000 1'b0;
end 

// expected C6L1
initial
begin
	C6L1_expected = 1'bX;
	C6L1_expected = #79000 1'b0;
end 

// expected C7L1
initial
begin
	C7L1_expected = 1'bX;
	C7L1_expected = #79000 1'b0;
end 

// expected C1L2
initial
begin
	C1L2_expected = 1'bX;
	C1L2_expected = #79000 1'b0;
end 

// expected C2L2
initial
begin
	C2L2_expected = 1'bX;
	C2L2_expected = #79000 1'b0;
end 

// expected C3L2
initial
begin
	C3L2_expected = 1'bX;
	C3L2_expected = #79000 1'b0;
end 

// expected C4L2
initial
begin
	C4L2_expected = 1'bX;
	C4L2_expected = #79000 1'b0;
end 

// expected C5L2
initial
begin
	C5L2_expected = 1'bX;
	C5L2_expected = #79000 1'b0;
end 

// expected C6L2
initial
begin
	C6L2_expected = 1'bX;
	C6L2_expected = #79000 1'b0;
end 

// expected C7L2
initial
begin
	C7L2_expected = 1'bX;
	C7L2_expected = #79000 1'b0;
end 

// expected C1L3
initial
begin
	C1L3_expected = 1'bX;
	C1L3_expected = #79000 1'b0;
end 

// expected C2L3
initial
begin
	C2L3_expected = 1'bX;
	C2L3_expected = #79000 1'b0;
end 

// expected C3L3
initial
begin
	C3L3_expected = 1'bX;
	C3L3_expected = #79000 1'b0;
end 

// expected C4L3
initial
begin
	C4L3_expected = 1'bX;
	C4L3_expected = #79000 1'b0;
end 

// expected C5L3
initial
begin
	C5L3_expected = 1'bX;
	C5L3_expected = #79000 1'b0;
end 

// expected C6L3
initial
begin
	C6L3_expected = 1'bX;
	C6L3_expected = #79000 1'b0;
end 

// expected C7L3
initial
begin
	C7L3_expected = 1'bX;
	C7L3_expected = #79000 1'b0;
end 

// expected C1L4
initial
begin
	C1L4_expected = 1'bX;
	C1L4_expected = #79000 1'b0;
end 

// expected C2L4
initial
begin
	C2L4_expected = 1'bX;
	C2L4_expected = #79000 1'b0;
end 

// expected C3L4
initial
begin
	C3L4_expected = 1'bX;
	C3L4_expected = #79000 1'b0;
end 

// expected C4L4
initial
begin
	C4L4_expected = 1'bX;
	C4L4_expected = #79000 1'b0;
end 

// expected C5L4
initial
begin
	C5L4_expected = 1'bX;
	C5L4_expected = #79000 1'b0;
end 

// expected C6L4
initial
begin
	C6L4_expected = 1'bX;
	C6L4_expected = #79000 1'b0;
end 

// expected C7L4
initial
begin
	C7L4_expected = 1'bX;
	C7L4_expected = #79000 1'b0;
end 

// expected C1L5
initial
begin
	C1L5_expected = 1'bX;
	C1L5_expected = #79000 1'b0;
end 

// expected C2L5
initial
begin
	C2L5_expected = 1'bX;
	C2L5_expected = #79000 1'b0;
end 

// expected C3L5
initial
begin
	C3L5_expected = 1'bX;
	C3L5_expected = #79000 1'b0;
end 

// expected C4L5
initial
begin
	C4L5_expected = 1'bX;
	C4L5_expected = #79000 1'b0;
end 

// expected C5L5
initial
begin
	C5L5_expected = 1'bX;
	C5L5_expected = #79000 1'b0;
end 

// expected C6L5
initial
begin
	C6L5_expected = 1'bX;
	C6L5_expected = #79000 1'b0;
end 

// expected C7L5
initial
begin
	C7L5_expected = 1'bX;
	C7L5_expected = #79000 1'b0;
end 
// generate trigger
always @(C1L1_expected or C1L1 or C1L2_expected or C1L2 or C1L3_expected or C1L3 or C1L4_expected or C1L4 or C1L5_expected or C1L5 or C2L1_expected or C2L1 or C2L2_expected or C2L2 or C2L3_expected or C2L3 or C2L4_expected or C2L4 or C2L5_expected or C2L5 or C3L1_expected or C3L1 or C3L2_expected or C3L2 or C3L3_expected or C3L3 or C3L4_expected or C3L4 or C3L5_expected or C3L5 or C4L1_expected or C4L1 or C4L2_expected or C4L2 or C4L3_expected or C4L3 or C4L4_expected or C4L4 or C4L5_expected or C4L5 or C5L1_expected or C5L1 or C5L2_expected or C5L2 or C5L3_expected or C5L3 or C5L4_expected or C5L4 or C5L5_expected or C5L5 or C6L1_expected or C6L1 or C6L2_expected or C6L2 or C6L3_expected or C6L3 or C6L4_expected or C6L4 or C6L5_expected or C6L5 or C7L1_expected or C7L1 or C7L2_expected or C7L2 or C7L3_expected or C7L3 or C7L4_expected or C7L4 or C7L5_expected or C7L5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C1L1 = %b | expected C1L2 = %b | expected C1L3 = %b | expected C1L4 = %b | expected C1L5 = %b | expected C2L1 = %b | expected C2L2 = %b | expected C2L3 = %b | expected C2L4 = %b | expected C2L5 = %b | expected C3L1 = %b | expected C3L2 = %b | expected C3L3 = %b | expected C3L4 = %b | expected C3L5 = %b | expected C4L1 = %b | expected C4L2 = %b | expected C4L3 = %b | expected C4L4 = %b | expected C4L5 = %b | expected C5L1 = %b | expected C5L2 = %b | expected C5L3 = %b | expected C5L4 = %b | expected C5L5 = %b | expected C6L1 = %b | expected C6L2 = %b | expected C6L3 = %b | expected C6L4 = %b | expected C6L5 = %b | expected C7L1 = %b | expected C7L2 = %b | expected C7L3 = %b | expected C7L4 = %b | expected C7L5 = %b | ",C1L1_expected_prev,C1L2_expected_prev,C1L3_expected_prev,C1L4_expected_prev,C1L5_expected_prev,C2L1_expected_prev,C2L2_expected_prev,C2L3_expected_prev,C2L4_expected_prev,C2L5_expected_prev,C3L1_expected_prev,C3L2_expected_prev,C3L3_expected_prev,C3L4_expected_prev,C3L5_expected_prev,C4L1_expected_prev,C4L2_expected_prev,C4L3_expected_prev,C4L4_expected_prev,C4L5_expected_prev,C5L1_expected_prev,C5L2_expected_prev,C5L3_expected_prev,C5L4_expected_prev,C5L5_expected_prev,C6L1_expected_prev,C6L2_expected_prev,C6L3_expected_prev,C6L4_expected_prev,C6L5_expected_prev,C7L1_expected_prev,C7L2_expected_prev,C7L3_expected_prev,C7L4_expected_prev,C7L5_expected_prev);
	$display("| real C1L1 = %b | real C1L2 = %b | real C1L3 = %b | real C1L4 = %b | real C1L5 = %b | real C2L1 = %b | real C2L2 = %b | real C2L3 = %b | real C2L4 = %b | real C2L5 = %b | real C3L1 = %b | real C3L2 = %b | real C3L3 = %b | real C3L4 = %b | real C3L5 = %b | real C4L1 = %b | real C4L2 = %b | real C4L3 = %b | real C4L4 = %b | real C4L5 = %b | real C5L1 = %b | real C5L2 = %b | real C5L3 = %b | real C5L4 = %b | real C5L5 = %b | real C6L1 = %b | real C6L2 = %b | real C6L3 = %b | real C6L4 = %b | real C6L5 = %b | real C7L1 = %b | real C7L2 = %b | real C7L3 = %b | real C7L4 = %b | real C7L5 = %b | ",C1L1_prev,C1L2_prev,C1L3_prev,C1L4_prev,C1L5_prev,C2L1_prev,C2L2_prev,C2L3_prev,C2L4_prev,C2L5_prev,C3L1_prev,C3L2_prev,C3L3_prev,C3L4_prev,C3L5_prev,C4L1_prev,C4L2_prev,C4L3_prev,C4L4_prev,C4L5_prev,C5L1_prev,C5L2_prev,C5L3_prev,C5L4_prev,C5L5_prev,C6L1_prev,C6L2_prev,C6L3_prev,C6L4_prev,C6L5_prev,C7L1_prev,C7L2_prev,C7L3_prev,C7L4_prev,C7L5_prev);
`endif
	if (
		( C1L1_expected_prev !== 1'bx ) && ( C1L1_prev !== C1L1_expected_prev )
		&& ((C1L1_expected_prev !== last_C1L1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1L1_expected_prev);
		$display ("     Real value = %b", C1L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C1L1_exp = C1L1_expected_prev;
	end
	if (
		( C1L2_expected_prev !== 1'bx ) && ( C1L2_prev !== C1L2_expected_prev )
		&& ((C1L2_expected_prev !== last_C1L2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1L2_expected_prev);
		$display ("     Real value = %b", C1L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_C1L2_exp = C1L2_expected_prev;
	end
	if (
		( C1L3_expected_prev !== 1'bx ) && ( C1L3_prev !== C1L3_expected_prev )
		&& ((C1L3_expected_prev !== last_C1L3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1L3_expected_prev);
		$display ("     Real value = %b", C1L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C1L3_exp = C1L3_expected_prev;
	end
	if (
		( C1L4_expected_prev !== 1'bx ) && ( C1L4_prev !== C1L4_expected_prev )
		&& ((C1L4_expected_prev !== last_C1L4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1L4_expected_prev);
		$display ("     Real value = %b", C1L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_C1L4_exp = C1L4_expected_prev;
	end
	if (
		( C1L5_expected_prev !== 1'bx ) && ( C1L5_prev !== C1L5_expected_prev )
		&& ((C1L5_expected_prev !== last_C1L5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1L5_expected_prev);
		$display ("     Real value = %b", C1L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C1L5_exp = C1L5_expected_prev;
	end
	if (
		( C2L1_expected_prev !== 1'bx ) && ( C2L1_prev !== C2L1_expected_prev )
		&& ((C2L1_expected_prev !== last_C2L1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2L1_expected_prev);
		$display ("     Real value = %b", C2L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C2L1_exp = C2L1_expected_prev;
	end
	if (
		( C2L2_expected_prev !== 1'bx ) && ( C2L2_prev !== C2L2_expected_prev )
		&& ((C2L2_expected_prev !== last_C2L2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2L2_expected_prev);
		$display ("     Real value = %b", C2L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_C2L2_exp = C2L2_expected_prev;
	end
	if (
		( C2L3_expected_prev !== 1'bx ) && ( C2L3_prev !== C2L3_expected_prev )
		&& ((C2L3_expected_prev !== last_C2L3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2L3_expected_prev);
		$display ("     Real value = %b", C2L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_C2L3_exp = C2L3_expected_prev;
	end
	if (
		( C2L4_expected_prev !== 1'bx ) && ( C2L4_prev !== C2L4_expected_prev )
		&& ((C2L4_expected_prev !== last_C2L4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2L4_expected_prev);
		$display ("     Real value = %b", C2L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_C2L4_exp = C2L4_expected_prev;
	end
	if (
		( C2L5_expected_prev !== 1'bx ) && ( C2L5_prev !== C2L5_expected_prev )
		&& ((C2L5_expected_prev !== last_C2L5_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2L5_expected_prev);
		$display ("     Real value = %b", C2L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_C2L5_exp = C2L5_expected_prev;
	end
	if (
		( C3L1_expected_prev !== 1'bx ) && ( C3L1_prev !== C3L1_expected_prev )
		&& ((C3L1_expected_prev !== last_C3L1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3L1_expected_prev);
		$display ("     Real value = %b", C3L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_C3L1_exp = C3L1_expected_prev;
	end
	if (
		( C3L2_expected_prev !== 1'bx ) && ( C3L2_prev !== C3L2_expected_prev )
		&& ((C3L2_expected_prev !== last_C3L2_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3L2_expected_prev);
		$display ("     Real value = %b", C3L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_C3L2_exp = C3L2_expected_prev;
	end
	if (
		( C3L3_expected_prev !== 1'bx ) && ( C3L3_prev !== C3L3_expected_prev )
		&& ((C3L3_expected_prev !== last_C3L3_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3L3_expected_prev);
		$display ("     Real value = %b", C3L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_C3L3_exp = C3L3_expected_prev;
	end
	if (
		( C3L4_expected_prev !== 1'bx ) && ( C3L4_prev !== C3L4_expected_prev )
		&& ((C3L4_expected_prev !== last_C3L4_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3L4_expected_prev);
		$display ("     Real value = %b", C3L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_C3L4_exp = C3L4_expected_prev;
	end
	if (
		( C3L5_expected_prev !== 1'bx ) && ( C3L5_prev !== C3L5_expected_prev )
		&& ((C3L5_expected_prev !== last_C3L5_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C3L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C3L5_expected_prev);
		$display ("     Real value = %b", C3L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_C3L5_exp = C3L5_expected_prev;
	end
	if (
		( C4L1_expected_prev !== 1'bx ) && ( C4L1_prev !== C4L1_expected_prev )
		&& ((C4L1_expected_prev !== last_C4L1_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4L1_expected_prev);
		$display ("     Real value = %b", C4L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_C4L1_exp = C4L1_expected_prev;
	end
	if (
		( C4L2_expected_prev !== 1'bx ) && ( C4L2_prev !== C4L2_expected_prev )
		&& ((C4L2_expected_prev !== last_C4L2_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4L2_expected_prev);
		$display ("     Real value = %b", C4L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_C4L2_exp = C4L2_expected_prev;
	end
	if (
		( C4L3_expected_prev !== 1'bx ) && ( C4L3_prev !== C4L3_expected_prev )
		&& ((C4L3_expected_prev !== last_C4L3_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4L3_expected_prev);
		$display ("     Real value = %b", C4L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_C4L3_exp = C4L3_expected_prev;
	end
	if (
		( C4L4_expected_prev !== 1'bx ) && ( C4L4_prev !== C4L4_expected_prev )
		&& ((C4L4_expected_prev !== last_C4L4_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4L4_expected_prev);
		$display ("     Real value = %b", C4L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_C4L4_exp = C4L4_expected_prev;
	end
	if (
		( C4L5_expected_prev !== 1'bx ) && ( C4L5_prev !== C4L5_expected_prev )
		&& ((C4L5_expected_prev !== last_C4L5_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4L5_expected_prev);
		$display ("     Real value = %b", C4L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_C4L5_exp = C4L5_expected_prev;
	end
	if (
		( C5L1_expected_prev !== 1'bx ) && ( C5L1_prev !== C5L1_expected_prev )
		&& ((C5L1_expected_prev !== last_C5L1_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5L1_expected_prev);
		$display ("     Real value = %b", C5L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_C5L1_exp = C5L1_expected_prev;
	end
	if (
		( C5L2_expected_prev !== 1'bx ) && ( C5L2_prev !== C5L2_expected_prev )
		&& ((C5L2_expected_prev !== last_C5L2_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5L2_expected_prev);
		$display ("     Real value = %b", C5L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_C5L2_exp = C5L2_expected_prev;
	end
	if (
		( C5L3_expected_prev !== 1'bx ) && ( C5L3_prev !== C5L3_expected_prev )
		&& ((C5L3_expected_prev !== last_C5L3_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5L3_expected_prev);
		$display ("     Real value = %b", C5L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_C5L3_exp = C5L3_expected_prev;
	end
	if (
		( C5L4_expected_prev !== 1'bx ) && ( C5L4_prev !== C5L4_expected_prev )
		&& ((C5L4_expected_prev !== last_C5L4_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5L4_expected_prev);
		$display ("     Real value = %b", C5L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_C5L4_exp = C5L4_expected_prev;
	end
	if (
		( C5L5_expected_prev !== 1'bx ) && ( C5L5_prev !== C5L5_expected_prev )
		&& ((C5L5_expected_prev !== last_C5L5_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C5L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C5L5_expected_prev);
		$display ("     Real value = %b", C5L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_C5L5_exp = C5L5_expected_prev;
	end
	if (
		( C6L1_expected_prev !== 1'bx ) && ( C6L1_prev !== C6L1_expected_prev )
		&& ((C6L1_expected_prev !== last_C6L1_exp) ||
			on_first_change[26])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6L1_expected_prev);
		$display ("     Real value = %b", C6L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[26] = 1'b0;
		last_C6L1_exp = C6L1_expected_prev;
	end
	if (
		( C6L2_expected_prev !== 1'bx ) && ( C6L2_prev !== C6L2_expected_prev )
		&& ((C6L2_expected_prev !== last_C6L2_exp) ||
			on_first_change[27])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6L2_expected_prev);
		$display ("     Real value = %b", C6L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[27] = 1'b0;
		last_C6L2_exp = C6L2_expected_prev;
	end
	if (
		( C6L3_expected_prev !== 1'bx ) && ( C6L3_prev !== C6L3_expected_prev )
		&& ((C6L3_expected_prev !== last_C6L3_exp) ||
			on_first_change[28])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6L3_expected_prev);
		$display ("     Real value = %b", C6L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[28] = 1'b0;
		last_C6L3_exp = C6L3_expected_prev;
	end
	if (
		( C6L4_expected_prev !== 1'bx ) && ( C6L4_prev !== C6L4_expected_prev )
		&& ((C6L4_expected_prev !== last_C6L4_exp) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6L4_expected_prev);
		$display ("     Real value = %b", C6L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_C6L4_exp = C6L4_expected_prev;
	end
	if (
		( C6L5_expected_prev !== 1'bx ) && ( C6L5_prev !== C6L5_expected_prev )
		&& ((C6L5_expected_prev !== last_C6L5_exp) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C6L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C6L5_expected_prev);
		$display ("     Real value = %b", C6L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_C6L5_exp = C6L5_expected_prev;
	end
	if (
		( C7L1_expected_prev !== 1'bx ) && ( C7L1_prev !== C7L1_expected_prev )
		&& ((C7L1_expected_prev !== last_C7L1_exp) ||
			on_first_change[31])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7L1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7L1_expected_prev);
		$display ("     Real value = %b", C7L1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[31] = 1'b0;
		last_C7L1_exp = C7L1_expected_prev;
	end
	if (
		( C7L2_expected_prev !== 1'bx ) && ( C7L2_prev !== C7L2_expected_prev )
		&& ((C7L2_expected_prev !== last_C7L2_exp) ||
			on_first_change[32])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7L2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7L2_expected_prev);
		$display ("     Real value = %b", C7L2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[32] = 1'b0;
		last_C7L2_exp = C7L2_expected_prev;
	end
	if (
		( C7L3_expected_prev !== 1'bx ) && ( C7L3_prev !== C7L3_expected_prev )
		&& ((C7L3_expected_prev !== last_C7L3_exp) ||
			on_first_change[33])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7L3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7L3_expected_prev);
		$display ("     Real value = %b", C7L3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[33] = 1'b0;
		last_C7L3_exp = C7L3_expected_prev;
	end
	if (
		( C7L4_expected_prev !== 1'bx ) && ( C7L4_prev !== C7L4_expected_prev )
		&& ((C7L4_expected_prev !== last_C7L4_exp) ||
			on_first_change[34])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7L4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7L4_expected_prev);
		$display ("     Real value = %b", C7L4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[34] = 1'b0;
		last_C7L4_exp = C7L4_expected_prev;
	end
	if (
		( C7L5_expected_prev !== 1'bx ) && ( C7L5_prev !== C7L5_expected_prev )
		&& ((C7L5_expected_prev !== last_C7L5_exp) ||
			on_first_change[35])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C7L5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C7L5_expected_prev);
		$display ("     Real value = %b", C7L5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[35] = 1'b0;
		last_C7L5_exp = C7L5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module Letreiro_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg ch0;
reg ch1;
// wires                                               
wire C1L1;
wire C1L2;
wire C1L3;
wire C1L4;
wire C1L5;
wire C2L1;
wire C2L2;
wire C2L3;
wire C2L4;
wire C2L5;
wire C3L1;
wire C3L2;
wire C3L3;
wire C3L4;
wire C3L5;
wire C4L1;
wire C4L2;
wire C4L3;
wire C4L4;
wire C4L5;
wire C5L1;
wire C5L2;
wire C5L3;
wire C5L4;
wire C5L5;
wire C6L1;
wire C6L2;
wire C6L3;
wire C6L4;
wire C6L5;
wire C7L1;
wire C7L2;
wire C7L3;
wire C7L4;
wire C7L5;

wire sampler;                             

// assign statements (if any)                          
Letreiro i1 (
// port map - connection between master ports and signals/registers   
	.C1L1(C1L1),
	.C1L2(C1L2),
	.C1L3(C1L3),
	.C1L4(C1L4),
	.C1L5(C1L5),
	.C2L1(C2L1),
	.C2L2(C2L2),
	.C2L3(C2L3),
	.C2L4(C2L4),
	.C2L5(C2L5),
	.C3L1(C3L1),
	.C3L2(C3L2),
	.C3L3(C3L3),
	.C3L4(C3L4),
	.C3L5(C3L5),
	.C4L1(C4L1),
	.C4L2(C4L2),
	.C4L3(C4L3),
	.C4L4(C4L4),
	.C4L5(C4L5),
	.C5L1(C5L1),
	.C5L2(C5L2),
	.C5L3(C5L3),
	.C5L4(C5L4),
	.C5L5(C5L5),
	.C6L1(C6L1),
	.C6L2(C6L2),
	.C6L3(C6L3),
	.C6L4(C6L4),
	.C6L5(C6L5),
	.C7L1(C7L1),
	.C7L2(C7L2),
	.C7L3(C7L3),
	.C7L4(C7L4),
	.C7L5(C7L5),
	.CLK(CLK),
	.ch0(ch0),
	.ch1(ch1)
);

// CLK
initial
begin
	repeat(7)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
	CLK = #5000 1'b1;
	CLK = #4000 1'b0;
end 

// ch0
initial
begin
	repeat(3)
	begin
		ch0 = 1'b0;
		ch0 = #10000 1'b1;
		# 10000;
	end
	ch0 = 1'b0;
	ch0 = #10000 1'b1;
	ch0 = #9000 1'b0;
end 

// ch1
initial
begin
	ch1 = 1'b0;
end 

Letreiro_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ch0(ch0),
	.ch1(ch1),
	.sampler_tx(sampler)
);

Letreiro_vlg_check_tst tb_out(
	.C1L1(C1L1),
	.C1L2(C1L2),
	.C1L3(C1L3),
	.C1L4(C1L4),
	.C1L5(C1L5),
	.C2L1(C2L1),
	.C2L2(C2L2),
	.C2L3(C2L3),
	.C2L4(C2L4),
	.C2L5(C2L5),
	.C3L1(C3L1),
	.C3L2(C3L2),
	.C3L3(C3L3),
	.C3L4(C3L4),
	.C3L5(C3L5),
	.C4L1(C4L1),
	.C4L2(C4L2),
	.C4L3(C4L3),
	.C4L4(C4L4),
	.C4L5(C4L5),
	.C5L1(C5L1),
	.C5L2(C5L2),
	.C5L3(C5L3),
	.C5L4(C5L4),
	.C5L5(C5L5),
	.C6L1(C6L1),
	.C6L2(C6L2),
	.C6L3(C6L3),
	.C6L4(C6L4),
	.C6L5(C6L5),
	.C7L1(C7L1),
	.C7L2(C7L2),
	.C7L3(C7L3),
	.C7L4(C7L4),
	.C7L5(C7L5),
	.sampler_rx(sampler)
);
endmodule

